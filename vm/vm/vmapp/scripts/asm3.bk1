from icecream import ic 
import os
class Assembler:
    def __init__(self):
        self.memory = [0] * 256  # Example memory size of 256 bytes
        self.registers = [0] * 16  # Example register count of 16
        self.labels = {}
        self.instructions = {
            "NOP": 0x0,
            "LOAD": 0x1,
            "LOADI": 0x2,
            "STORE": 0x3,
            "ADD": 0x4,
            "SUB": 0x4,
            "JMP": 0xB,
            "JZ": 0xB,
            "HALT": 0xC
        }

    def parse_line(self, line):
        parts = line.split()
        instr = parts[0].upper()
        ic(parts)
        ic(instr)
        os.system('pause')

        if instr.endswith(':'):
            label = instr[:-1]
            ic(label)
            ic(len(self.memory))            
            self.labels[label] = len(self.memory) // 2
            ic(self.labels[label])
            os.system('pause')
            return None  # It's a label, no machine code

        if instr == "NOP":
            return "0x0000"
        elif instr == "HALT":
            return "0xC000"
        elif instr in {"LOAD", "STORE", "LOADI"}:
            r = int(parts[1][1], 16)
            xy = int(parts[2], 16)
            x = (xy & 0xF0) >> 4
            y = xy & 0x0F
            return f"0x{self.instructions[instr]:X}{r:X}{x:X}{y:X}"
        elif instr in {"ADD", "SUB"}:
            r = int(parts[1][1], 16)
            s = int(parts[2][1], 16)
            t = int(parts[3][1], 16)
            return f"0x{self.instructions[instr]:X}{r:X}{s:X}{t:X}"
        elif instr == "JMP":
            addr = self.labels.get(parts[1], int(parts[1], 16))
            x = (addr & 0xF0) >> 4
            y = addr & 0x0F
            return f"0xB0{x:X}{y:X}"
        elif instr == "JZ":
            addr = self.labels[parts[1]]
            return f"0xB{addr >> 4:X}{addr & 0x0F:X}"
        else:
            raise ValueError(f"Unknown instruction: {instr}")

    def assemble(self, asm_code):
        machine_code = []
        lines = asm_code.strip().split('\n')
        # First pass to collect labels
        for line in lines:
            line = line.strip()
            if line and not line.startswith(';'):
                self.parse_line(line)

        # Second pass to generate machine code
        for line in lines:
            line = line.strip()
            if line and not line.startswith(';'):
                mc = self.parse_line(line)
                if mc:
                    machine_code.append(mc)
        return machine_code

    def assemble_from_file(self, input_filename, output_filename):
        with open(input_filename, 'r') as f:
            asm_code = f.read()
        machine_code = self.assemble(asm_code)
        with open(output_filename, 'w') as f:
            for code in machine_code:
                f.write(code + '\n')

    def get_memory(self):
        return self.memory

    def get_registers(self):
        return self.registers

    def reset(self):
        self.memory = [0] * 256
        self.registers = [0] * 16

if __name__ == '__main__':
    # Example usage:
    asm_code = """
    NOP
    LOADI R1, 3
    LOADI R2, 4
    TEST:
    ADD R3, R1, R2
    STORE R3, 31
    LOADI R3, 1
    LOADI R4, 8
    ADD R5, R3, R4
    OR R1, R2, R3
    STORE R1, 32
    AND R4, R5, R6
    STORE R4, 33
    XOR R4, R5, R6
    STORE R4, 34
    SHR R4, 2 
    STORE R4, 35
    ; Clear display memory (0x80 to 0xFF)
    LOADI R1, 80    ; Start address of display memory
    LOADI R2, 0     ; Value to clear

    CLEAR_LOOP:
    STORE R2, R1    ; Clear memory at R1
    ADD R1, R1, 1   ; Increment address
    LOADI R3, FF    ; Load upper bound address
    CMP R1, R3      ; Compare current address with upper bound
    JLT CLEAR_LOOP  ; Jump to CLEAR_LOOP if R1 < FF
    HALT
    """

    assembler = Assembler()
    machine_code = assembler.assemble(asm_code)
    assembler.save_to_file(machine_code, 'output.b')  # Save to current directory

    # Print the assembled machine code to verify
    print(machine_code)
